# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# The number of nodes except the master
NUM_NODES = 1

$env_init_script = <<SCRIPT
yum install -y wget expect
tar xvf /vagrant/python_runtime.tar.gz -C /tmp
cp -rf /tmp/python_runtime/* /usr
wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz
tar -xf setuptools-1.4.2.tar.gz
cd setuptools-1.4.2
python2.7 setup.py install;
yum install -y python-pip
yum install -y git
pip install virtualenv
rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-6.rpm
yum -y --enablerepo=remi,remi-test install redis
yum -y install screen
SCRIPT

$adapter_init_script = <<SCRIPT
/etc/init.d/redis restart
cd ~/
# add github to the list of known_hosts
# see http://rshestakov.wordpress.com/2014/01/26/how-to-make-vagrant-and-puppet-to-clone-private-github-repo/
if [[ ! -d /root/.ssh ]]; then
  mkdir /root/.ssh && touch /root/.ssh/known_hosts
fi
ssh-keyscan -H github.com >> /root/.ssh/known_hosts && chmod 600 /root/.ssh/known_hosts
if [[ -d ./49ers ]]; then
  rm -rf ./49ers
fi
ssh-agent bash -c 'ssh-add /vagrant/sshkey/id_rsa; git clone git@github.com:tedk2015/49ers.git'
cd /root/49ers/data_collector
virtualenv -p /usr/bin/python2.7 venv
source venv/bin/activate
pip install -r src/res/requirements.txt
mkdir src/logs
killall -9 python2.7
PYTHONPATH=./src/collectors:./src/collectors/fitbit:./:./src:./src/common python2.7 src/core/api.py -r $1 2>&1 > ./src/logs/debug.log&
SCRIPT

$hosts_init_script = <<SCRIPT
echo -n "" > /etc/hosts
while [ "$1" != "" ]; do
  hostname=$1
  shift
  ipaddr=$1
  shift
  echo "$ipaddr $hostname" >> /etc/hosts
done
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do | config |

  host_ip_list = ["localhost", "127.0.0.1"]
  (1..3).each do |i|
    host_ip_list.push("ambarinode#{i}")
    host_ip_list.push("10.32.78.#{i+50}")
  end

  (1..NUM_NODES).each do |i|
    host_ip_list.push("adapter#{i}")
    host_ip_list.push("10.32.78.#{i+40}")
  end

  virtual_netconfig = lambda do |net, ip, fwdports|
    net.vm.network "private_network", ip: ip
    for fwd in fwdports do
      net.vm.network "forwarded_port", id: fwd[0], guest: fwd[1], host: fwd[2]
    end
    net.vm.provision "shell", inline: $hosts_init_script, args: host_ip_list
  end

  privkey_install = lambda do |pk, filename|
    FileUtils.copy(File.expand_path("./sshkey/#{filename}"), ".")
    pk.vm.provision "shell", inline: "mkdir -p ~/.ssh; cp /vagrant/#{filename} ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa"
  end

  (1..NUM_NODES).each do |i|
    vmname = "adapter#{i}"
    config.vm.define vmname.to_sym do |node_conf|
      node_conf.vm.host_name = vmname
      node_conf.vm.box = "geerlingguy/centos6"
      node_conf.ssh.forward_agent = true
      node_conf.vm.provision "shell", inline: $env_init_script
      node_conf.vm.network :public_network, ip: "10.32.78.#{i+40}", netmask: "255.255.0.0"
      node_conf.vm.provider :virtualbox do |vb, override|
        vb.customize ["modifyvm", :id, "--memory", "2048"]
        vb.customize ["modifyvm", :id, "--name", vmname]
        virtual_netconfig.call(node_conf, "172.17.8.#{i+40}", [])
        override.vm.provision "shell", inline: $adapter_init_script, args: "10.32.78.#{i+40}"
      end
    end
  end

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
